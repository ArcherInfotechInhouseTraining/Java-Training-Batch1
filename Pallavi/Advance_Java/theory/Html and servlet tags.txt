Reading data from different form components in a servlet can be done using request.getParameter(), 
as each form element is sent with its name attribute in the HTTP request. Here’s how to handle various 
types of form components:

1. Text Fields: Text fields are commonly used for single-line text input.

HTML Form (Text Field)

<form action="FormServlet" method="post">
    <label for="username">Username:</label>
    <input type="text" id="username" name="username">
    <input type="submit" value="Submit">
</form>

Servlet

protected void doPost(HttpServletRequest request, HttpServletResponse response)
        throws ServletException, IOException {
    String username = request.getParameter("username");
    // Process data
}

//---------------------------------------------------------------------------------------------

2. Password Fields: Password fields are similar to text fields but hide the input text.

HTML Form (Password Field)

<label for="password">Password:</label>
<input type="password" id="password" name="password">

Servlet

String password = request.getParameter("password");

//---------------------------------------------------------------------------------------------

3. Radio Buttons: Radio buttons allow users to select only one option from a set.

HTML Form (Radio Buttons)

<label>Gender:</label>
<input type="radio" name="gender" value="Male"> Male
<input type="radio" name="gender" value="Female"> Female

Servlet

String gender = request.getParameter("gender"); // Will get "Male" or "Female"

//---------------------------------------------------------------------------------------------

4. Checkboxes
Checkboxes allow multiple selections. When selected, they pass their value; otherwise, they are not sent in the request.

HTML Form (Checkboxes)

<label>Skills:</label>
<input type="checkbox" name="skill" value="Java"> Java
<input type="checkbox" name="skill" value="Python"> Python
<input type="checkbox" name="skill" value="JavaScript"> JavaScript

Servlet

String[] skills = request.getParameterValues("skill"); // Array of selected values
if (skills != null) {
    for (String skill : skills) {
        // Process each skill
    }
}

//---------------------------------------------------------------------------------------------

5. Drop-down (Select) Lists
Drop-down lists allow users to select one or multiple options based on the multiple attribute.

HTML Form (Single Select Drop-down)

<label for="country">Country:</label>
<select id="country" name="country">
    <option value="India">India</option>
    <option value="USA">USA</option>
</select>

Servlet

String country = request.getParameter("country"); // Single selected value

HTML Form (Multiple Select Drop-down)

<label for="languages">Languages:</label>
<select id="languages" name="languages" multiple>
    <option value="Java">Java</option>
    <option value="Python">Python</option>
    <option value="JavaScript">JavaScript</option>
</select>

Servlet

String[] languages = request.getParameterValues("languages"); // Array of selected values

//---------------------------------------------------------------------------------------------

6. Hidden Fields
Hidden fields store data that is not visible to the user but sent to the server.

HTML Form (Hidden Field)

<input type="hidden" name="userId" value="12345">

Servlet

String userId = request.getParameter("userId");

//---------------------------------------------------------------------------------------------

7. Text Area
Text areas allow for multi-line text input.

HTML Form (Text Area)

<label for="comments">Comments:</label>
<textarea id="comments" name="comments"></textarea>

Servlet

String comments = request.getParameter("comments");

//---------------------------------------------------------------------------------------------------

8. File Uploads
File uploads require enctype="multipart/form-data" in the form and need additional handling in the servlet.

HTML Form (File Upload)

<form action="UploadServlet" method="post" enctype="multipart/form-data">
    <label for="file">Choose file:</label>
    <input type="file" id="file" name="file">
    <input type="submit" value="Upload">
</form>

Servlet (Using Apache Commons FileUpload Library)

protected void doPost(HttpServletRequest request, HttpServletResponse response)
        throws ServletException, IOException {
    if (ServletFileUpload.isMultipartContent(request)) {
        DiskFileItemFactory factory = new DiskFileItemFactory();
        ServletFileUpload upload = new ServletFileUpload(factory);
        try {
            List<FileItem> items = upload.parseRequest(request);
            for (FileItem item : items) {
                if (!item.isFormField()) {
                    String fileName = item.getName();
                    InputStream fileContent = item.getInputStream();
                    // Process file content
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

//-----------------------------------------------------------------------------------------------

9. Date Input
The date input type allows users to select a date.

HTML Form (Date Input)

<label for="dob">Date of Birth:</label>
<input type="date" id="dob" name="dob">

Servlet

String dob = request.getParameter("dob"); // Format: YYYY-MM-DD

//-----------------------------------------------------------------------------------------------
